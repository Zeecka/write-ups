import random
import string
from Crypto.Cipher import AES,PKCS1_OAEP
from Crypto.PublicKey import RSA
from Crypto.Util.number import getPrime, isPrime, bytes_to_long, inverse, long_to_bytes

def get_rand_bytes(length):
  return "".join([chr(random.randrange(256)) for i in range(length)])

def encrypt(public_key, message):
  """Encrypt a message with a given public key.

  Takes in a public_key generated by Crypto.PublicKey.RSA, which must be of
  size exactly 4096
  """
  symmetric_key = get_rand_bytes(32)
  msg_header = PKCS1_OAEP.new(public_key).encrypt(symmetric_key)
  assert len(msg_header) == 512
  msg_iv = get_rand_bytes(16)
  msg_body = AES.new(symmetric_key,
      mode=AES.MODE_CFB,
      IV=msg_iv).encrypt(message)
  return msg_header + msg_iv + msg_body

def decrypt(private_key, ciphertext):
  """Decrypt a message with a given private key.

  Takes in a private_key generated by Crypto.PublicKey.RSA, which must be of
  size exactly 4096

  If the ciphertext is invalid, return None
  """
  if len(ciphertext) < 512 + 16:
    return None
  msg_header = ciphertext[:512]
  msg_iv = ciphertext[512:512+16]
  msg_body = ciphertext[512+16:]
  try:
    symmetric_key = PKCS1_OAEP.new(private_key).decrypt(msg_header)
  except ValueError:
    return None
  if len(symmetric_key) != 32:
    return None
  return AES.new(symmetric_key,
      mode=AES.MODE_CFB,
      IV=msg_iv).decrypt(msg_body)

def getN():
    output = open("RSABuffetNs.txt", 'wt')
    for j in range(0, 10):
        if j != 2:
            keyFile = 'key-' + str(j) + ".pem"
            with open(keyFile) as f2:
                key = RSA.importKey(f2.read())
                output.write(str(key.n))
                output.write('\n')
                if j == 3:
                    print(j, str(key.e), str(key.n))
    output.close()


def findMessage():
    for i in range(1, 6):
        ciphertextFile = 'ciphertext-' + str(i) + ".bin"
        with open(ciphertextFile) as f:
            ciphertext = f.read()
            for j in range(0, 10):
                keyFile = 'key-' + str(j) + ".pem"
                #print("testing " + ciphertextFile + " " + keyFile)
                with open(keyFile) as f2:
                    key = RSA.importKey(f2.read())
                    #print(key.n)
                    if j == 2:
                        p = long(2758599203)
                        q = 199050626189790903113151725251371951406311367304411013359159100762029303668345459282823483508119186508070350039475140948570888009866572148405365532164833126992414461936781273087675274788769905198546175946505790118332257676994622928414648644875376193656132263418075334807302665038501361680530751104620475935886499714767992159620130246904875540624651891646715835632182355428589610236128648209568297096024509697960196858754170641081387466229916585122877955908862176165344465889280850859817985096316883025515924332365977538735425288433292357532172467247159245727072344354499113900733623716569924461327947462469348798798400461045817375922057805611166274339541877392159201774893120311667898551312256530117094221191204981071357303328506659872809131929265966688409379037586014938643190675726674943253875287765020503118408406103824607730713529079962656130622218633922911733000466212212532871890933508287965723844399784165195088175666883742686183165151553009638524764735387233844317375317153437534933611361683136151569588355535831475925641431859231311079029505004457816932257031352498323214304125608733640306746900473758755832661915903475867854937735150255829715879232213599597863424779218670961633567259935246911742292942052832671549
                        d = inverse(key.e, (p-1)*(q-1))
                        private_key = RSA.construct((key.n, key.e, d, p, q))
                        output = decrypt(private_key, ciphertext)
                        if output:
                            if all([x in string.printable for x in output]):
                                print(ciphertextFile, keyFile, output)
                    elif j == 3:
                        d = 0xb3ddc7e19c7fb510e7ee69d7600fee35ae4ea2c5ac332eae22fcb9cf2219e410f08c1169d23c6e569cd142a72716346107dc39754a386ff192ed5bea1534045fL
                        p = 0xcb95253f33dbce52f2c889aa4757dc2e1d9c23e76734e24a911f56cfc01b512bc8fa32bad671e63c65e2ceb026e1156dbd54184d0314f1075ad44ebc6ed00f60e151a193e0e7cb87247fa59fe7f88bccab0fdb7148213fd962f01607950662b0c6029b61536c362404124431cec7c861c849af9c0a4880b0fc66eba883af7c8c3aa206cb98496e47d5b0a35822ae5adb9f4c0119418db9b9287b0d97ec06de3197085dc776476d37aa5cb96c947bdc27508c109b26faf044630b81b804dd8d0a84d22f77d16b3d4d66f9d3b8abc45a125d26f146173d9e1c97faa845323f33a6586e059c3d4e5c9a866e8c5c66b2a19f7239cf24a39a8505ced07f292aaba2e5
                        q = 0xc0c24a75718adaced3650b1cae09a71dafb8db46202e0d482dde2276d2f796429e2451b0e5fa59e32f2f2704a1de35fd7cfd2e45000030145b354b90d2ddc6de18de13f9cd62cd0718fe657f4fd1266fa6389f9ba7c59386c011fbe1e49bf92a948746e4f33f4dd73dc359998aa2c8e6870cf5bb57aeb9fd7b07af9e628830cf265df1294c07602fcc88c5c5619cc8fe82b546a540c71b0455255db696b06f3590b1761cab8b44a2edfc6bdf1efc2f723f1f66c0a725ffa8a57109043c26d32fd0b3ba96caeb6741b1ba9d34d85b5a5d49463f798f3256eb09ea4b9fc4c4e192cd748e19734937f39dac6049231fbd44625ba209454fdbde12a342a481d6b28f
                        private_key = RSA.construct((key.n, key.e, d, p, q))

                        output = decrypt(private_key, ciphertext)
                        if output:
                            if all([x in string.printable for x in output]):
                                print(ciphertextFile, keyFile, output)
                    elif j == 1:
                        p = 0xe091b0dc2546d318a36fbde1bdb0f7f0f2eb4e9b97f0e81a994e26a1127bd00ba65bf1eddc02ef193e83a5f3a1ecd19323e36fbb67e870a154fc0a5df0b294dcd60b020e9decb8e4b0dc05949be1c2f68600490e2a900ca3676fdb2b6508943b425b2c8500b03660ff0f453220f21f05fc6c8a3024ef797a1a537fcf8b943c79ae04b6f2f464644a1116e943d0a50a54977673ddcf5bdb8b60a4564b05c42eb6af3eb5cb968c8391c253fbefff8050f4f89e6b577662cde31b52433e5e3b36f3e018ac63b185bdf9624814f3d5a9f58b5c0a40d65d3b6e1a1faf6ef55f7fe5f05f0095af16037b084fd5b3faf6cca4e788b5b2300117fc08d50e61f990309b2f
                        q = 0xe091b0dc2546d318a36fbde1bdb0f7f0f2eb4e9b97f0e81a994e26a1127bd00ba65bf1eddc02ef193e83a5f3a1ecd19323e36fbb67e870a154fc0a5df0b294dcd60b020e9decb8e4b0dc05949be1c2f68600490e2a900ca3676fdb2b6508943b425b2c8500b03660ff0f453220f21f05fc6c8a3024ef797a1a537fcf8b943c79ae04b6f2f464644a1116e943d0a50a54977673ddcf5bdb8b60a4564a05c42eb6af3eb5cb968c8391c253fbefff8050f4f89e6b577662cde31b52433e5e3b36f3e018ac63b185bdf9624814f3d5a9f58b5c0a40d65d3b6e1a1faf6ef55f7fe5f05f0095af16037b084fd5b3faf6cca4e788b5b2300117fc08d50e61f99030983f
                        d = inverse(key.e, (p-1)*(q-1))
                        private_key = RSA.construct((key.n, key.e, d, p, q))
                        output = decrypt(private_key, ciphertext)
                        if output:
                            if all([x in string.printable for x in output]):
                                print(ciphertextFile, keyFile, output)

def test():
  # Test!
  message = "This is my test message.  It's kind of ssilly.wireheirhgwieruhgwieurghwiregsilly.wireheirhgwieruhgwieurghwiregsilly.wireheirhgwieruhgwieurghwiregsilly.wireheirhgwieruhgwieurghwiregsilly.wireheirhgwieruhgwieurghwiregsilly.wireheirhgwieruhgwieurghwiregsilly.wireheirhgwieruhgwieurghwiregsilly.wireheirhgwieruhgwieurghwiregsilly.wireheirhgwieruhgwieurghwiregsilly.wireheirhgwieruhgwieurghwiregsilly.wireheirhgwieruhgwieurghwiregilly.wireheirhgwieruhgwieurghwireg"
  private_key = RSA.generate(4096)
  public_key = private_key.publickey()
  ciphertext = encrypt(public_key, message)
  print(private_key)
  assert message == decrypt(private_key, ciphertext)

if __name__=="__main__":
    #test()
    findMessage()
    #getN()